// Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.

#pragma once

#include "Carla/Actor/ActorDefinition.h"

#include "Carla/Sensor/ShaderBasedSensor.h"

#include "GPULidar.generated.h"

/// A GPU depth based Lidar sensor.
UCLASS()
class CARLA_API AGPULidar : public AShaderBasedSensor
{
  GENERATED_BODY()

public:

  static FActorDefinition GetSensorDefinition();

  AGPULidar(const FObjectInitializer &ObjectInitializer);

  void Set(const FActorDescription &ActorDescription) override;

  uint32_t GetMaxHorizontalPoints() const;

  uint32_t GetChannels() const;

  uint32_t GetCurrentHorizontalPoints() const;

  float GetFov() const;

  float GetHorizontalAngle() const;

protected:

  virtual void Tick(float DeltaTime) override;

private:

  void Rotate(float DeltaTime);

  /// Debug Lidar visualization
  void RenderDebugLidar();

protected:

  // =============================================================================
  // -- GPU Lidar Description ----------------------------------------------------
  // =============================================================================

  UPROPERTY(EditAnywhere)
  float ImageFOV = 120.0f;

  /// Number of max horizontal lasers per frame (Image Size X).
  /// The image X will be cutted depending on the delta time.
  UPROPERTY(EditAnywhere)
  uint32 MaxHorizontalPoints = 600u;

  /// Number of vertical lasers (Image Size Y).
  UPROPERTY(EditAnywhere)
  uint32 Channels = 32u;

  /// Measure distance in centimeters.
  UPROPERTY(EditAnywhere)
  float Range = 5000.0f;

  /// Points generated by all lasers per second.
  UPROPERTY(EditAnywhere)
  uint32 PointsPerSecond = 56000u;

  /// Lidar rotation frequency.
  UPROPERTY(EditAnywhere)
  float RotationFrequency = 10.0f;

  /// Upper laser angle, counts from horizontal, positive values means above
  /// horizontal line.
  UPROPERTY(EditAnywhere)
  float UpperFovLimit = 10.0f;

  /// Lower laser angle, counts from horizontal, negative values means under
  /// horizontal line.
  UPROPERTY(EditAnywhere)
  float LowerFovLimit = -30.0f;

  /// Wether to show debug points of laser hits in simulator.
  UPROPERTY(EditAnywhere)
  bool ShowDebugPoints = false;

  UPROPERTY(EditAnywhere)
  uint32 CurrentHorizontalPoints = Channels;

  UPROPERTY(EditAnywhere)
  float CurrentHorizontalAngle = 0.0f;
};
